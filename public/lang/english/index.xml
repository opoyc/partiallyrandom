<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>English on Partially Random</title>
    <link>/lang/english/</link>
    <description>Recent content in English on Partially Random</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>opoyserc@gmail.com (Obryan Poyser)</managingEditor>
    <webMaster>opoyserc@gmail.com (Obryan Poyser)</webMaster>
    <copyright>(c) 2018 Copyright Partially Random</copyright>
    <lastBuildDate>Tue, 04 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/lang/english/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to cope with the media bias in the news market?</title>
      <link>/2018/09/04/2018-09-04-should-we-demand-mess-media-bias-or-diverge-our-information-sources/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      <author>opoyserc@gmail.com (Obryan Poyser)</author>
      <guid>/2018/09/04/2018-09-04-should-we-demand-mess-media-bias-or-diverge-our-information-sources/</guid>
      <description>In the new age of information, the common wisdom dictates that people acquire and validate cues that endorse their prejudices. Nonetheless, it is likely that information providers were aware of such behavior even from the times when the print press was invented, taking advance to maximize the probability of inflicting influence in the society.
In an Economic theory on demand for news assumes that individuals read, watch and listen to information according to a function that maximizes the utility for given better decision-making function.</description>
    </item>
    
    <item>
      <title>Creating a dummy variable: the Tidy way</title>
      <link>/2018/07/26/2018-07-26-creating-a-dummy-variable-the-tidy-way/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      <author>opoyserc@gmail.com (Obryan Poyser)</author>
      <guid>/2018/07/26/2018-07-26-creating-a-dummy-variable-the-tidy-way/</guid>
      <description>Working with categorical variables in R can be a headache sometimes. Among the things I miss the most in Stata is how easy is to convert categorical variables to dummy/binary variables which are used to compare categorical variables in a regression. For instance, converting the variable result composed by a Likert scale of order 3 (bad, good and excellent). In Stata you just type tabulate result, generate(res) as seen below:</description>
    </item>
    
    <item>
      <title>Getting research titles from science direct</title>
      <link>/2018/05/28/2018-05-28-getting-science-direct-articles/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      <author>opoyserc@gmail.com (Obryan Poyser)</author>
      <guid>/2018/05/28/2018-05-28-getting-science-direct-articles/</guid>
      <description>Lately, I have been reading a lot of articles within sciencedirect website. Now, after spending several hours reading and moving through pages I realize that it is time to create a snippet to get the articles right away. Hope it helps you too!
Packages needed require(rvest) require(tidyverse) require(stringr)  Function ext_keyF &amp;lt;- function(key_word, journal){ s1 &amp;lt;- &amp;quot;https://www.sciencedirect.com/search?qs=&amp;quot; s2 &amp;lt;- &amp;quot;&amp;amp;pub=&amp;quot; s3 &amp;lt;- &amp;quot;&amp;amp;show=100&amp;amp;sortBy=relevance&amp;amp;articleTypes=FLA&amp;amp;lastSelectedFacet=articleTypes&amp;quot; key_t &amp;lt;- key_word %&amp;gt;% stringr::str_replace_all(&amp;quot; &amp;quot;, &amp;quot;%20&amp;quot;) jour_t &amp;lt;- journal %&amp;gt;% stringr::str_replace_all(&amp;quot; &amp;quot;, &amp;quot;%20&amp;quot;) %&amp;gt;% stringr::str_replace_all(&amp;quot;&amp;amp;&amp;quot;, &amp;quot;%26&amp;quot;) link &amp;lt;- paste0(s1, key_t, s2, jour_t, s3) pages &amp;lt;- read_html(link) %&amp;gt;% html_nodes(&amp;quot;.</description>
    </item>
    
    <item>
      <title>Esas canciones que quiebran y reparan</title>
      <link>/2017/07/17/2017-07-17-esas-canciones-que-quiebran-y-reparan/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      <author>opoyserc@gmail.com (Obryan Poyser)</author>
      <guid>/2017/07/17/2017-07-17-esas-canciones-que-quiebran-y-reparan/</guid>
      <description>Hoy por cosas de youtube (a todos nos ha pasado que terminamos viendo videos de Corgies, CIERTO? VERDAD?) terminé con esta interpretación por parte de Playing For Change de la canción Sittin’ on the dock of the bay de Otis Redding (palabras mayores).
Lo cierto es que en lo que a Soul respecta, se gana el MVP, es de esas canciones que te llegan sin filtro al pecho y es imposible no conmoverse.</description>
    </item>
    
    <item>
      <title>Example of frequentist perspective of probability</title>
      <link>/2017/06/09/2017-06-09-example-of-frequentist-perspective-of-probability/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      <author>opoyserc@gmail.com (Obryan Poyser)</author>
      <guid>/2017/06/09/2017-06-09-example-of-frequentist-perspective-of-probability/</guid>
      <description>This function tries to visualize the frequentist perspective of probability by flipping an equilibrated π(θ)=0.5 coin.
Frequentist approach establish that the true probability of an event θ is given by:
\[ \pi(\theta_i)=\lim_{\theta_i\to\infty} \frac{n_{\theta\_i}}{n_{trials,i}} \]
# obs is the number of times a coin is flipped # coins are the number of indepedent coins tossed at the same time f.coin=function(flips, coins){ plot(x = 0 , ylab = &amp;quot;Probability&amp;quot; , xlab = &amp;quot;Times&amp;quot; , main = paste(&amp;quot;Flipping&amp;quot;, coins, &amp;quot;indepedent coins&amp;quot;, flips, &amp;quot;times&amp;quot;) , type = &amp;quot;n&amp;quot;, ylim = c(0, 1), xlim = c(0, flips)) abline(h = .</description>
    </item>
    
    <item>
      <title>Save with time stamp</title>
      <link>/2017/04/26/2017-04-26-save-with-time-stamp/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      <author>opoyserc@gmail.com (Obryan Poyser)</author>
      <guid>/2017/04/26/2017-04-26-save-with-time-stamp/</guid>
      <description>Oftenly I have to deal with modifications of a scraping code, whose outcomes change or are subject to errors. Hence, I found useful to have a way to create versions of a data frame, this is a made savts.
This simple yet useful function creates csv file with time stamp. It saves a data frame in the working directory as a csv file, separated by semicolon with a date and system time (format %d%m%y_%H%M).</description>
    </item>
    
  </channel>
</rss>